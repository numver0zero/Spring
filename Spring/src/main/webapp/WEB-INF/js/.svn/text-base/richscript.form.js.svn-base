/*
 * Rich JavaScript framework, (For SK M&C - CLA Project)
 * On jQuery(version 1.4) & Prototype(version 1.6.1)
 * Copyright (c) 2010 Lee Won-Gyoon <mail.kido@gmail.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * For details, see the RichScript web site: http://www.richScript.net/
 * 
*******************************************************************************/

/**
* Selector $form(String _formName)
* Form의 사용을 편리하게 해준다.
* 내부적으로 prototype.js의 Selector $()의 기능에 필요한 기능을 추가하여 반환한다.
* @param arguments[0] : Form이름 or Form객체
* @return Object : 기능이 향상된 Form Object
*/
function $form() {
	var o = (typeof arguments[0] == "string") ? $(document[arguments[0]]) : $(arguments[0]);
	if (o!=null&&o.__$form!=true) {
		o.__$form = true;
		
		/* Define $form Methods */
		o.createInput		= richScript.__form.createInput;
		o.setInput			= richScript.__form.setInput;
		o.getCheckedValue	= richScript.__form.getCheckedValue;
		o.setCheckedValue	= richScript.__form.setCheckedValue;
		o.setChecked		= richScript.__form.setChecked;
		o.setDisabled		= richScript.__form.setDisabled;
		o.setReadOnly		= richScript.__form.setReadOnly;
		o.isUnchecked		= richScript.__form.isUnchecked;
		o.isValid			= richScript.__form.isValid;
		o.submitToPopup		= richScript.__form.submitToPopup;
	}
	return o;
}

/* Implement $form Methods */
richScript.__form = {
	
	/**
	* 동적으로 인풋을 생성한다.
	* 동일 이름의 인풋이 있어도 같은 이름으로 인풋을 생성한다.
	* @param _name : (String) 인풋 이름
	* @param _value : (String) 인풋 값
	* @return Void
	*/
	createInput : function(_name, _value) {
		this.insert({
			bottom : new Element("input", {
				type : "hidden"
				, name : _name
				, value : _value
			})
		});
	},
	
	/**
	* 동적으로 인풋의 값을 할당.
	* 인풋이 있으면 인풋에 할당하고 없으면 인풋을 만들어서 값을 할당한다.
	* Array 형태일 경우 Array 전체의 value를 입력값으로 변경한다.
	* Array 형태일 경우 _name뒤에 index를 붙이면 해당 단일 인풋의 값만 입력값으로 변경한다.
	* 입력한 index의 값이 Array의 length를 벗어나면 아무 작업도 안한다.
	* Ex) .setInput("targetInputName(3)", "입력값")
	* @param _name : (String) 인풋 이름
	* @param _value : (String) 인풋 값
	* @return Void
	*/
	setInput : function(_name, _value) {
		if (_name==undefined) _name = "";
		var index = -1;
		if (_name.indexOf("(")>-1) {
			index = parseInt(_name.split("(")[1].split(")")[0].trim(), 10);
			_name = _name.split("(")[0];
		}
		var input = (index==-1) ? this[_name] : this[_name][index];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					input[i].value = _value;
				}
			} else {
				input.value = _value;
			}
			input = null;
		} else {
			if (index==-1) {
				this.createInput(_name, _value);
			}
		}
	},
	
	/**
	* 동일한 이름의 checkbox or radio 중 선택된 값을 구분자로 합쳐서 리턴함.
	* @param _name : (String) 타겟 Checkbox or Radio 인풋 이름
	* @param _char : (String) 값을 합칠 때 사용할 구분자, 체크박스일 경우 사용 (Default : ",")
	* @return String
	*/
	getCheckedValue : function(_name, _char) {
		if (_char==undefined) _char = ",";
		var returnValue = "";
		var input = this[_name];
		var n = 0;
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					if (input[i].checked) {
						if (n>0) {
							returnValue += _char;
						}
						returnValue += input[i].value;
						n++;
					}
				}
			} else {
				if (input.checked) {
					returnValue = input.value;
				}
			}
		}
		input = null;
		return returnValue;
	},
	
	/**
	* 해당 체크박스 Array중 value가 _value인 체크박스를 찾아서
	* 체크 여부를 _isChecked 상태로 변경함.
	* @param _name : (String) 타겟 Checkbox or Radio 인풋 이름
	* @param _value : (String) 타겟 checkbox의 value
	* @param _isChecked : (Boolean) 체크 여부 true/false (Default : true)
	* @return Void
	*/
	setCheckedValue : function(_name, _value, _isChecked) {
		if (_isChecked==undefined) _isChecked = true;
		if (_value==undefined) _value = "";
		var input = this[_name];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					if (input[i].value==""+_value) {
						input[i].checked = _isChecked;
					}
				}
			} else {
				if (input.value==_value) {
					input.checked = _isChecked;
				}
			}
		}
		input = null;
	},
	
	/**
	* 동일한 이름의 checkbox 전체를 체크하거나 체크 해제시킨다.
	* @param _name : (String) 타겟 Checkbox 인풋 이름
	* @param _isChecked : (Boolean) 체크 여부 (Default : true)
	* @return Void
	*/
	setChecked : function(_name, _isChecked) {
		if (_isChecked==undefined) _isChecked = true;
		var input = this[_name];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					input[i].checked = _isChecked;
				}
			} else {
				input.checked = _isChecked;
			}
		}
		input = null;
	},
	
	/**
	* 해당 인풋의 disable속성을 변경한다.
	* Array형태일 경우 _name뒤에 index를 붙인다.
	* Ex) "checkboxInputName(3)"
	* @param _name : (String) 타겟 인풋 이름
	* @param _isDisabled : (Boolean) Disabled 여부 (Default : true)
	* @return Void
	*/
	setDisabled : function(_name, _isDisabled) {
		if (_isDisabled==undefined) _isDisabled = true;
		if (_name==undefined) _name = "";
		var index = -1;
		if (_name.indexOf("(")>-1) {
			index = parseInt(_name.split("(")[1].split(")")[0].trim(), 10);
			_name = _name.split("(")[0];
		}
		var input = (index==-1) ? this[_name] : this[_name][index];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					input[i].disabled = _isDisabled;
				}
			} else {
				input.disabled = _isDisabled;
			}
		}
		input = null;
	},
	
	/**
	* 해당 인풋의 readOnly속성을 변경한다.
	* Array형태일 경우 _name뒤에 index를 붙인다.
	* Ex) "checkboxInputName(3)"
	* @param _name : (String) 타겟 인풋 이름
	* @param _isReadOnly : (Boolean) ReadOnly 여부 (Default : true)
	* @return Void
	*/
	setReadOnly : function(_name, _isReadOnly) {
		if (_isReadOnly==undefined) _isReadOnly = true;
		if (_name==undefined) _name = "";
		var index = -1;
		if (_name.indexOf("(")>-1) {
			index = parseInt(_name.split("(")[1].split(")")[0].trim(), 10);
			_name = _name.split("(")[0];
		}
		var input = (index==-1) ? this[_name] : this[_name][index];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					input[i].readOnly = _isReadOnly;
				}
			} else {
				input.readOnly = _isReadOnly;
			}
		}
		input = null;
	},
	
	/**
	* 동일한 이름의 checkbox or radio 중 하나라도 체크된것이 있는지 확인한다.
	* _msg를 입력하면 체크된 것이 없을 경우 alert을 보여준다.
	* @param _name : (String) 타겟 Checkbox or Radio 인풋 이름
	* @param _msg : (String) 체크된 것이 없을 때 보여질 alert() 문구
	* @return Boolean : 체크된 것이 없으면 true, 하나라도 체크되어있으면 false
	*/
	isUnchecked : function(_name, _msg) {
		var returnValue = true;
		var input = this[_name];
		if (input!=null) {
			if (input.length>1) {
				for (var i=0; i<input.length; i++) {
					if (input[i].checked) {
						returnValue = false;
						break;
					}
				}
			} else {
				if (input.checked) {
					returnValue = false;
				}
			}
		}
		if (_msg!=undefined&&returnValue) {
			alert(_msg);
		}
		input = null;
		return returnValue;
	},
	
	/**
	* 팝업창을 생성한 후 해당 팝업창으로 Submit 한다.
	* @param _url : (String) 팝업창 URL
	* @param _target : (String) 팝업창 이름
	* @param _option : (String) 팝업 옵션 windows.open()과 동일 (left=10,top=10....)
	* @return Void
	*/
	submitToPopup : function(_url, _target, _option) {
		if (_target==undefined||_target==""||_target.toUpperCase()=="_BLANK") _target = "RICHSCRIPT_POPUP_FROM_FORM_"+(new Date()).getTime();
		if(_option==undefined||_option=="")_option= "toolbar=0,scrollbars=1,location=0,status=0,menubar=0,directories=0,width=30,height=30";
		var popup = window.open("about:blank", _target, _option);
		var prevTarget = (this.target==undefined) ? "_self" : this.target;
		this.target = _target;
		this.action = _url;
		this.submit();
		this.target = prevTarget;
		try{popup.focus();}catch(e){}
		popup = null;
	},
	
	/**
	* 폼의 유효성 체크를 한다.
	* @return Boolean
	*/
	isValid : function() {
		return validate(this);
	}
	
};




/**
* 이하 각종 Form 유효성 체크 관련 부분
* (앞으로 정해지는 프로젝트 요구사항에 맞게 적절히 수정해서 사용할 것)
******************************************************************************/

var funcs = {};
funcs['nospace'] = isNoSpace;				/* 공백없이 */
funcs['email'] = isValidEmail;				/* 이메일검사 */
funcs['emailfirst'] = isValidEmailFirst;	/* 이메일 앞자리 */
funcs['phone'] = isValidPhone;				/* 전화번호 */
funcs['userid'] = isValidUserid;			/* 아이디 */
funcs['hangul'] = hasHangul;				/* 한글 */
funcs['number'] = isNumeric;				/* 숫자 */
funcs['number2'] = isNumeric2;				/* 숫자2 */
funcs['engonly'] = alphaOnly;				/* 영문 */
funcs['hangulonly'] = hangulOnly;			/* 한글 */
funcs['jumin'] = isValidJumin;				/* 주민번호 */
funcs['bizno'] = isValidBizNo;				/* 사업자번호 */
funcs['pw'] = isValidPassword;				/* 비밀번호 */


var NO_BLANK = "{name+을를} 입력하여 주십시오";
var NO_SELECT = "{name+을를} 선택하여주십시오";
var NOT_VALID = "{name+이가} 올바르지 않습니다";
var TOO_LONG = "{name}의 길이가 초과되었습니다 (최대 {maxbyte}바이트)";
var TOO_SHORT = "{name}의 길이가 부족합니다 (최소 {minbyte}바이트)";

String.prototype.hasFinalConsonant = function(str) {
	str = this != window ? this : str; 
	var strTemp = str.substr(str.length-1);
	return ((strTemp.charCodeAt(0)-16)%28!=0);
}

function josa(str,tail) {
	return (str.hasFinalConsonant()) ? tail.substring(0,1) : tail.substring(1,2);
}

function validate(form) {
	var i=0;

	for (i = 0; i < form.elements.length; i++ ) {
		var el = form.elements[i];
		if(el.tagName.toUpperCase() != "OBJECT") {
			el.value = el.value.trim();
	
			if (el.getAttribute("REQUIRED") != null) {
				if(el.type.indexOf("select")>-1){
					if (el.selectedIndex==0 ) {
						return doError(el,NO_SELECT);
					}
				}else{
					if (el.value == null || el.value == "") {
						return doError(el,NO_BLANK);
					}
				}
			}
	
			if (el.getAttribute("MAXBYTE") != null && el.value != "") {
				var len = el.value.getBytes();
				if (len > parseInt(el.getAttribute("MAXBYTE"))) {
					maxbyte = el.getAttribute("MAXBYTE");
					return doError(el,TOO_LONG,"",maxbyte);
				}
			}
			if (el.getAttribute("MINBYTE") != null && el.value != "") {
				var len = el.value.getBytes();
				if (len < parseInt(el.getAttribute("MINBYTE"))) {
					minbyte = el.getAttribute("MINBYTE");
					return doError(el,TOO_SHORT,"",minbyte);
				}
			}
	
			if (el.getAttribute("OPTION") != null && el.value != "") {
				if (!funcs[el.getAttribute("OPTION").toLowerCase()](el)) return false;
			}
	
			if (el.getAttribute("FILETYPE") != null && el.value != "") {
				var validFileType = el.getAttribute("FILETYPE").split(",");
				var nFileType = el.value.substring(el.value.lastIndexOf(".")+1,el.length);
				var isValidFileType = false;
				for (j=0; j<validFileType.length ; j++) {
					if (nFileType.toUpperCase()==validFileType[j].toUpperCase().replace(/\s/g,"")) {
						isValidFileType = true;
					}
				}
				if (!isValidFileType) {
					var nameString = "";
					if (el.getAttribute("$name") != null && el.getAttribute("$name") != "") {
						nameString = "{name+이가} ";
					}
					return doError(el,nameString+"적절한 파일 포맷이 아닙니다.");
				}
			}
			
			if( el.getAttribute("type") == "file" && el.value != "") {
				if( !isNoHangulbyValue(el) ) return false;
			}
		}
	}
	return true;
}

function doError(el,type,action,byte) {
	var pattern = /{([a-zA-Z0-9_]+)\+?([가-힝]{2})?}/;
	var name = ($name = el.getAttribute("$NAME")) ? $name : el.getAttribute("NAME");
	pattern.exec(type);
	var tail = (RegExp.$2) ? josa(eval(RegExp.$1),RegExp.$2) : "";
	alert(type.replace(pattern,eval(RegExp.$1) + tail).replace(pattern,byte));
	if (action == "sel") {
		el.select();
	} else if (action == "del")	{
		el.value = "";
	}
	if (el.getAttribute("UNFOCUSED") == null) {
		if(el.type!="hidden"&&el.style.display.toUpperCase()!="NONE"){		
			el.focus();
		}
	}	
	return false;
}	






/**
* 패턴 검사 함수들
******************************************************************************/

function isNoSpace(el) {
	var pattern = /[\s]/;
	return (!pattern.test(el.value)) ? true : doError(el,"{name+은는} 띄어쓰기 없이 입력해주시기 바랍니다");
}

function isValidEmail(el) {
	var pattern = /^[_a-zA-Z0-9-\.]+@[\.a-zA-Z0-9-]+\.[a-zA-Z]+$/;
	return (pattern.test(el.value)) ? true : doError(el,NOT_VALID);
}

function isValidEmailFirst(el) {
	var pattern = /^[_a-zA-Z0-9-\.]+$/;
	return (pattern.test(el.value)) ? true : doError(el,NOT_VALID);
}

function isValidUserid(el) {
	var pattern = /^[a-zA-Z]{1}[a-zA-Z0-9_]{3,11}$/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 4자이상 12자 미만이어야 하고,\n 영문,숫자, _ 문자만 사용할 수 있습니다");
}

function isNoHangulbyValue(el) {
	var pattern = /[가-힝]/;
	var splitValue = el.value.split('\\');
	var filename = splitValue[splitValue.length-1];
	
	return (!pattern.test(filename)) ? true : doError(el,"첨부파일명(" + filename + ")에는 한글을 사용할 수 없습니다.");
}

function hasHangul(el) {
	var pattern = /[가-힝]/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 반드시 한글을 포함해야 합니다");
}
function hangulOnly(el) {
	var pattern = /^[가-힝]+$/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 한글만 입력가능 합니다");
}

function alphaOnly(el) {
	var pattern = /^[a-zA-Z]+$/;
	return (pattern.test(el.value)) ? true : doError(el,NOT_VALID);
}

function isNumeric(el) {
	var pattern = /^[0-9]+$/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 반드시 숫자로만 입력해야 합니다");
}

function isNumeric2(el) {
	var pattern = /^[0-9,.]+$/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 반드시 숫자로만 입력해야 합니다");
}


function isValidJumin(el) {
    var pattern = /^([0-9]{6})-?([0-9]{7})$/; 
	var num = el.value;
    if (!pattern.test(num)) return doError(el,NOT_VALID); 
    num = RegExp.$1 + RegExp.$2;

	var sum = 0;
	var last = num.charCodeAt(12) - 0x30;
	var bases = "234567892345";
	for (var i=0; i<12; i++) {
		if (isNaN(num.substring(i,i+1))) return doError(el,NOT_VALID);
		sum += (num.charCodeAt(i) - 0x30) * (bases.charCodeAt(i) - 0x30);
	}
	var mod = sum % 11;
	return ((11 - mod) % 10 == last) ? true : doError(el,NOT_VALID);
}

function isValidBizNo(el) { 
	var pattern = /([0-9]{3})-?([0-9]{2})-?([0-9]{5})/; 
	var num = el.value;
    if (!pattern.test(num)) return doError(el,NOT_VALID); 
    num = RegExp.$1 + RegExp.$2 + RegExp.$3;
    var cVal = 0; 
    for (var i=0; i<8; i++) { 
        var cKeyNum = parseInt(((_tmp = i % 3) == 0) ? 1 : ( _tmp  == 1 ) ? 3 : 7); 
        cVal += (parseFloat(num.substring(i,i+1)) * cKeyNum) % 10; 
    } 
    var li_temp = parseFloat(num.substring(i,i+1)) * 5 + '0'; 
    cVal += parseFloat(li_temp.substring(0,1)) + parseFloat(li_temp.substring(1,2)); 
    return (parseInt(num.substring(9,10)) == 10-(cVal % 10)%10) ? true : doError(el,NOT_VALID); 
}

/*
function isValidPhone(el) {
	var pattern = /^([0]{1}[0-9]{1,2})-?([1-9]{1}[0-9]{2,3})-?([0-9]{4})$/;
	if (pattern.exec(el.value)) {
		if(RegExp.$1 == "011" || RegExp.$1 == "016" || RegExp.$1 == "017" || RegExp.$1 == "018" || RegExp.$1 == "019") {
			el.value = RegExp.$1 + "-" + RegExp.$2 + "-" + RegExp.$3;
		}
		return true;
	} else {
		return doError(el,NOT_VALID);
	}
}
*/

function isValidPhone(el) {
	var pattern = /^[0-9-]+$/;
	return (pattern.test(el.value)) ? true : doError(el,"{name+은는} 반드시 숫자로만 입력해야 합니다");
}

function isValidDate(el) {
	var oDateStr = el.value;
	var oDate = new Date(oDateStr.substr(0,4),oDateStr.substr(4,2)-1,oDateStr.substr(6,2));
	var oYearStr=oDate.getFullYear();
	var oMonthStr=(oDate.getMonth()+1).toString();
	oMonthStr = (oMonthStr.length ==1) ? "0"+ oMonthStr: oMonthStr; 
	var oDayStr=oDate.getDate().toString();
	oDayStr = (oDayStr.length ==1) ? "0"+ oDayStr: oDayStr;
	return  (oDateStr == oYearStr+oMonthStr+oDayStr) ? true : doError(el,NOT_VALID); 
}

function isValidPassword(el) {
	var pattern = /^[A-Za-z0-9_\-\!@#]{4,12}$/;
	return (pattern.test(el.value)) ? true : doError(el,"비밀번호가 올바르지 않습니다.\n비밀번호는 4자이상 12자 이하의 영문, 숫자, 특수문자만 사용할 수 있습니다");
}


function isValidFileName(_s) {
	var returnValue = true;
	if (_s==undefined) _s = "";
	if (_s!="") {
		var startIndex = _s.lastIndexOf("\\");
		var fileName = _s.substring(startIndex+1);
		if (fileName.length>15) {
			returnValue = false;
		}
	}
	return returnValue;
}